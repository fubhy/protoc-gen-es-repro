// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file sf/substreams/v1/test/test.proto (package sf.substreams.v1.test, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message sf.substreams.v1.test.Block
 */
export class Block extends Message<Block> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint64 number = 2;
   */
  number = protoInt64.zero;

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "sf.substreams.v1.test.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

/**
 * @generated from message sf.substreams.v1.test.MapResult
 */
export class MapResult extends Message<MapResult> {
  /**
   * @generated from field: uint64 block_number = 1;
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: string block_hash = 2;
   */
  blockHash = "";

  constructor(data?: PartialMessage<MapResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "sf.substreams.v1.test.MapResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapResult {
    return new MapResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapResult {
    return new MapResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapResult {
    return new MapResult().fromJsonString(jsonString, options);
  }

  static equals(a: MapResult | PlainMessage<MapResult> | undefined, b: MapResult | PlainMessage<MapResult> | undefined): boolean {
    return proto3.util.equals(MapResult, a, b);
  }
}

/**
 * @generated from message sf.substreams.v1.test.Boolean
 */
export class Boolean extends Message<Boolean> {
  /**
   * @generated from field: bool result = 1;
   */
  result = false;

  constructor(data?: PartialMessage<Boolean>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "sf.substreams.v1.test.Boolean";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Boolean {
    return new Boolean().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Boolean {
    return new Boolean().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Boolean {
    return new Boolean().fromJsonString(jsonString, options);
  }

  static equals(a: Boolean | PlainMessage<Boolean> | undefined, b: Boolean | PlainMessage<Boolean> | undefined): boolean {
    return proto3.util.equals(Boolean, a, b);
  }
}

